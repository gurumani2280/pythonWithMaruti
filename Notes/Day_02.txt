8. Understanding str() function: Converting Other(int, float, bool) data types to str data type.
--------------------------------------------------------------------------------------------------

#Int to Str:
x = 10
print(type(x)) #output: <class 'int'>
y = str(x)
print(type(y)) #output: <class 'str'>

#Float to Str:
a = 20.4
print(type(a)) #output: <class 'float'>
b = str(a)
print(type(b)) #output: <class 'str'>

#Bool to Str:
c = True
print(type(c)) #output: <class 'bool'>
d = str(c)
print(type(d)) #output: <class 'str'>
#Note: Any data type can be converted to string using str() function.


9. Understanding bool() function: Converting Other(int, float, str) data types to bool data type.
-------------------------------------------------------------------------------------------------

#Int to bool:
a = 10
print(a, type(a)) #output: 10 <class 'int'>
b = bool(a)
print(b, type(b)) #output: True <class 'bool'>

a = 0
print(a, type(a)) #output: 0 <class 'int'>
b = bool(a)
print(b, type(b)) #output: False <class 'bool'>
#Note: Any int value other than 0(False) is considered as True.

#Float to bool:
c = 20.4
print(c, type(c)) #output: 20.4 <class 'float'>
d = bool(c)
print(d, type(d)) #output: True <class 'bool'>

c = 0.0
print(c, type(c)) #output: 0.0 <class 'float'>
d = bool(c)
print(d, type(d)) #output: False <class 'bool'>
#Note: Any float value other than 0.0(False) is considered as True.

#Str to bool:
e = 'Python'
print(e, type(e)) #output: Python <class 'str'>
f = bool(e)
print(f, type(f)) #output: True <class 'bool'>
#Note: Any data type can be converted to string using str() function.

e = ''
print(e, type(e)) #output:   <class 'str'>
f = bool(e)
print(f, type(f)) #output: False <class 'bool'>
#Note: Any String value other than empty string('' or "" or '''''' or """""")(False) is considered as True.


10. Understanding int() function: Converting Other(float, bool, str) data types to int data type.
-------------------------------------------------------------------------------------------------

#float to int:
c = 20.4
print(c, type(c)) #output: 20.4 <class 'float'>
d = int(c)
print(d, type(d)) #output: 20 <class 'int'>

c = 0.0
print(c, type(c)) #output: 0.0 <class 'float'>
d = int(c)
print(d, type(d)) #output: 0 <class 'int'>


#bool to int:
e = True
print(e, type(e)) #output: True <class 'bool'>
f = int(e)
print(f, type(f)) #output: 1 <class 'int'>

e = False
print(e, type(e)) #output: False <class 'bool'>
f = int(e)
print(f, type(f)) #output: 0 <class 'int'>
#While converting bool to int True is converted as 1 and False will be converting as 0.

#str to int:
e = '10'
print(e, type(e)) #output: 10 <class 'str'>
f = int(e)
print(f, type(f)) #output: 10 <class 'int'>

e = '10.25' #Float value in string format cannot be converted to int.
print(e, type(e)) #output: 10.25 <class 'str'>
f = int(e) #ValueError: could not convert string to float: 'True'
print(f, type(f)) #output: #ValueError: invalid literal for int() with base 10: '10.25'

e = 'Python'
print(e, type(e)) #output: Python <class 'str'>
f = int(e) #ValueError: could not convert string to float: 'True'
print(f, type(f)) #output: ValueError: invalid literal for int() with base 10: 'Python'
#Note: Any int value in string format will be able to convert it to int. But other than int value in string format can't be converted to int. It can be float, bool or string'.
#We get Error: "ValueError: invalid literal for int() with base 10."


11. Understanding float() function: Converting Other(int, bool, str) data types to float data type.
---------------------------------------------------------------------------------------------------

#int to float:
c = 20
print(c, type(c)) #output: 20 <class 'int'>
d = float(c)
print(d, type(d)) #output: 20.0 <class 'float'>

c = 0
print(c, type(c)) #output: 0 <class 'int'>
d = float(c)
print(d, type(d)) #output: 0.0 <class 'float'>


#bool to float:
e = True
print(e, type(e)) #output: True <class 'bool'>
f = float(e)
print(f, type(f)) #output: 1.0 <class 'float'>

e = False
print(e, type(e)) #output: False <class 'bool'>
f = float(e)
print(f, type(f)) #output: 0.0 <class 'float'>
#While converting bool to float True is converted as 1.0 and False will be converting as 0.0.

#str to float:
e = '10'
print(e, type(e)) #output: 10 <class 'str'>
f = float(e)
print(f, type(f)) #output: 10.0 <class 'float'>

e = '10.25'
print(e, type(e)) #output: 10.25 <class 'str'>
f = float(e)
print(f, type(f)) #output: 10.25 <class 'float'>

e = 'True'
print(e, type(e)) #output: True <class 'str'>
f = float(e) #ValueError: could not convert string to float: 'True'
print(f, type(f)) #output: ValueError: could not convert string to float: 'True'
#Note: Any int/float value in string format will be able to convert it to float. But other than int/float value in string format can't be converted to float. It can be bool or string'
#Error: ValueError: invalid literal for int() with base 10.


12. Addition or Summation of two user input values.
---------------------------------------------------
Example 1:
number_1 = input("Enter first number: ")
number_2 = input("Enter second number: ")

sum = number_1 + number_2
print(number_1, number_2, "Sum is: ", sum) #Output: 105 55 Sum is:  10555.
#Since input() function always consider input value as string hence concatenation happened.

sum = int(number_1) + int(number_2)
print(number_1, number_2, "Sum is: ", sum) #Output: 105 55 Sum is:  160

Example 2:
#We can directly convert input value to int using int() function as below:
number_1 = int(input("Enter first number: "))
number_2 = int(input("Enter second number: "))

sum = number_1 + number_2
print(number_1, number_2, "Sum is: ", sum) #Output: 105 55 Sum is:  160.


13. Writing a python program to check if the user input number is even or odd:
number = int(input("Enter your number: \n")) #'\n' is used to introduce 'next line' inside a string.

if number%2 == 0:
    print(f"Given number {number} is Even")
    print(f"Given number '{number}' is Even") #Formatting can be used to print variable in between string.
    print(f"""Given number '{number}' is Even""")
    print(f'Given number "{number}" is Even')
    print(f'''Given number "{number}" is Even''')
    print(f'Given number \'{number}\' is Even') #This is scape sequence

else:
    print(f"Given number {number} is Odd")
    print(f"Given number '{number}' is Odd")
    print(f"Given number '''{number}''' is Odd""")
    print(f'Given number "{number}" is Odd')
    print(f'Given number """{number}""" is Odd''')
    print(f"Given number \"{number}\" is Odd")
#if-else is used for conditional statements.

#Note: Check on scape sequences.



